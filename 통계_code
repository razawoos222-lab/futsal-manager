
// ==========================================
// CODE.GS - 풋살 통계 대시보드 서버 코드
// ==========================================

function doGet() {
  return HtmlService.createHtmlOutputFromFile('index')
    .setTitle('풋살 통계 대시보드')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// 전체 통계 요약 데이터 가져오기
function getOverallStats() {
  try {
    const ss = SpreadsheetApp.openById('1QLgBTnT516yLkp7YZ6uyUzVEk1PAvnR9ejOt5hxTq2DrwnxGgWq93vuM');
    const archiveSheet = ss.getSheetByName('기록실_개인기록');
    const playersSheet = ss.getSheetByName('선수별능력치');
    
    if (!archiveSheet || !playersSheet) {
      throw new Error('필요한 시트를 찾을 수 없습니다.');
    }
    
    // 개인 기록 데이터 가져오기
    const archiveData = archiveSheet.getRange(2, 1, archiveSheet.getLastRow() - 1, 10).getValues();
    const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 20).getValues();
    
    // 전체 통계 계산
    let totalMatches = 0;
    let totalPlayers = new Set();
    let totalGoals = 0;
    
    const playerStats = {};
    
    archiveData.forEach(row => {
      if (row[0] && row[1]) { // 날짜와 선수명이 있는 경우
        const playerName = row[1];
        totalPlayers.add(playerName);
        
        if (!playerStats[playerName]) {
          playerStats[playerName] = {
            matches: 0, wins: 0, draws: 0, losses: 0,
            goals: 0, assists: 0, defenses: 0, saves: 0
          };
        }
        
        playerStats[playerName].matches += row[2] || 0;
        playerStats[playerName].wins += row[3] || 0;
        playerStats[playerName].draws += row[4] || 0;
        playerStats[playerName].losses += row[5] || 0;
        playerStats[playerName].goals += row[6] || 0;
        playerStats[playerName].assists += row[7] || 0;
        playerStats[playerName].defenses += row[8] || 0;
        playerStats[playerName].saves += row[9] || 0;
        
        totalMatches += row[2] || 0;
        totalGoals += row[6] || 0;
      }
    });
    
    // 최고 기록 선수들 찾기
    let topScorer = null, topAssist = null, topDefender = null, topGK = null, mvp = null;
    let maxGoals = 0, maxAssists = 0, maxDefenses = 0, maxSaves = 0, maxMP = 0;
    
    Object.keys(playerStats).forEach(name => {
      const stats = playerStats[name];
      const mp = (stats.goals * 2) + (stats.assists * 2) + stats.defenses + stats.saves;
      
      if (stats.goals > maxGoals) { maxGoals = stats.goals; topScorer = name; }
      if (stats.assists > maxAssists) { maxAssists = stats.assists; topAssist = name; }
      if (stats.defenses > maxDefenses) { maxDefenses = stats.defenses; topDefender = name; }
      if (stats.saves > maxSaves) { maxSaves = stats.saves; topGK = name; }
      if (mp > maxMP) { maxMP = mp; mvp = name; }
    });
    
    return {
      totalMatches: Math.floor(totalMatches / 14), // 대략적인 전체 경기수
      totalPlayers: totalPlayers.size,
      totalGoals: totalGoals,
      topScorer: { name: topScorer, goals: maxGoals },
      topAssist: { name: topAssist, assists: maxAssists },
      topDefender: { name: topDefender, defenses: maxDefenses },
      topGK: { name: topGK, saves: maxSaves },
      mvp: { name: mvp, mp: maxMP }
    };
  } catch (error) {
    Logger.log('getOverallStats 오류: ' + error.toString());
    return { error: error.toString() };
  }
}

// 리더보드 데이터 가져오기
function getLeaderboards() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const archiveSheet = ss.getSheetByName('기록실_개인기록');
    const playersSheet = ss.getSheetByName('선수별능력치');
    
    const archiveData = archiveSheet.getRange(2, 1, archiveSheet.getLastRow() - 1, 10).getValues();
    const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 20).getValues();
    
    // 선수별 포지션 매핑
    const playerPositions = {};
    playersData.forEach(row => {
      if (row[0]) playerPositions[row[0]] = row[1] || 'MID';
    });
    
    const playerStats = {};
    
    // 개인 기록 집계
    archiveData.forEach(row => {
      if (row[0] && row[1]) {
        const playerName = row[1];
        
        if (!playerStats[playerName]) {
          playerStats[playerName] = {
            name: playerName,
            position: playerPositions[playerName] || 'MID',
            matches: 0, wins: 0, draws: 0, losses: 0,
            goals: 0, assists: 0, defenses: 0, saves: 0
          };
        }
        
        playerStats[playerName].matches += row[2] || 0;
        playerStats[playerName].wins += row[3] || 0;
        playerStats[playerName].draws += row[4] || 0;
        playerStats[playerName].losses += row[5] || 0;
        playerStats[playerName].goals += row[6] || 0;
        playerStats[playerName].assists += row[7] || 0;
        playerStats[playerName].defenses += row[8] || 0;
        playerStats[playerName].saves += row[9] || 0;
      }
    });
    
    // 배열로 변환하고 추가 계산
    const playersArray = Object.values(playerStats).map(p => {
      const totalGames = p.wins + p.draws + p.losses;
      return {
        ...p,
        winRate: totalGames > 0 ? ((p.wins / totalGames) * 100).toFixed(1) : '0.0',
        mp: (p.goals * 2) + (p.assists * 2) + p.defenses + p.saves,
        goalsPerMatch: p.matches > 0 ? (p.goals / p.matches).toFixed(2) : '0.00',
        assistsPerMatch: p.matches > 0 ? (p.assists / p.matches).toFixed(2) : '0.00'
      };
    });
    
    return {
      goals: playersArray.sort((a, b) => b.goals - a.goals).slice(0, 10),
      assists: playersArray.sort((a, b) => b.assists - a.assists).slice(0, 10),
      defenses: playersArray.sort((a, b) => b.defenses - a.defenses).slice(0, 10),
      saves: playersArray.sort((a, b) => b.saves - a.saves).slice(0, 10),
      mvp: playersArray.sort((a, b) => b.mp - a.mp).slice(0, 10),
      winRate: playersArray.filter(p => p.matches >= 5).sort((a, b) => parseFloat(b.winRate) - parseFloat(a.winRate)).slice(0, 10)
    };
  } catch (error) {
    Logger.log('getLeaderboards 오류: ' + error.toString());
    return { error: error.toString() };
  }
}

// 선수 비교 데이터 가져오기
function getPlayerComparison(player1, player2, player3) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const archiveSheet = ss.getSheetByName('기록실_개인기록');
    const playersSheet = ss.getSheetByName('선수별능력치');
    
    const archiveData = archiveSheet.getRange(2, 1, archiveSheet.getLastRow() - 1, 10).getValues();
    const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 20).getValues();
    
    // 선수별 포지션 매핑
    const playerPositions = {};
    playersData.forEach(row => {
      if (row[0]) playerPositions[row[0]] = row[1] || 'MID';
    });
    
    const players = [player1, player2, player3].filter(p => p && p.trim());
    const results = [];
    
    players.forEach(playerName => {
      const stats = {
        name: playerName,
        position: playerPositions[playerName] || 'MID',
        matches: 0, wins: 0, draws: 0, losses: 0,
        goals: 0, assists: 0, defenses: 0, saves: 0
      };
      
      archiveData.forEach(row => {
        if (row[1] === playerName) {
          stats.matches += row[2] || 0;
          stats.wins += row[3] || 0;
          stats.draws += row[4] || 0;
          stats.losses += row[5] || 0;
          stats.goals += row[6] || 0;
          stats.assists += row[7] || 0;
          stats.defenses += row[8] || 0;
          stats.saves += row[9] || 0;
        }
      });
      
      const totalGames = stats.wins + stats.draws + stats.losses;
      results.push({
        ...stats,
        winRate: totalGames > 0 ? ((stats.wins / totalGames) * 100).toFixed(1) : '0.0',
        mp: (stats.goals * 2) + (stats.assists * 2) + stats.defenses + stats.saves
      });
    });
    
    return results;
  } catch (error) {
    Logger.log('getPlayerComparison 오류: ' + error.toString());
    return { error: error.toString() };
  }
}

// 모든 선수 이름 가져오기
function getAllPlayerNames() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const playersSheet = ss.getSheetByName('선수별능력치');
    
    const playersData = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 1).getValues();
    return playersData.map(row => row[0]).filter(name => name);
  } catch (error) {
    Logger.log('getAllPlayerNames 오류: ' + error.toString());
    return [];
  }
}
